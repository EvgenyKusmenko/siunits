/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar defines SI units and other derived units such as 
 * 'm', 'km', 'km^2' or 'm*deg/(h^2*mg)'.
 *
 * The definitions are fully compliant to the definitions given in
 * International Bureau of Weights and Measures (20 May 2019),
 * SI Brochure: The International System of Units (SI) (9th ed.)
 * with exceptions for the aliasing of the non ASCII characters
 * 'µ' to u and 'Ω' to Ohm.
 *
 * SI Units are declared as independent Nonterminal and can then
 * be used as part of a 
 * * value definition, such as "5kg", or
 * * type definition, such as "km/h"
 * 
 * The grammar extends the MontiCore common literals, because it uses
 * natural numbers e.g. as exponent.
 */

grammar SIUnits extends de.monticore.literals.MCCommonLiterals {

  /**
   * Every SIUnit is either a dimensionless unit
   * such as 'deg' or a SIUnitExpression
   */
  SIUnit =
    SIUnitDimensionless | SIUnitExpression;

  /**
   * The SIUnitExpression describes an expression containing
   * SIUnitBasics as primitives so that every combination
   * of 'x*y', 'x/y', 'x^n' and '(x)'
   * is possible
   */
  interface SIUnitExpression;

  SIUnitMultExpression implements SIUnitExpression <10> =
    left:SIUnitExpression "*" right:SIUnitExpression;

  SIUnitOneDivExpression implements SIUnitExpression <20> =
    {cmpToken(1,"1")}? NatLiteral "/" right:SIUnitExpression;

  SIUnitDivExpression implements SIUnitExpression <30> =
    left:SIUnitExpression "/" right:SIUnitExpression;

  SIUnitBracketExpression implements SIUnitExpression <40> =
    "(" SIUnit ")";

  SIUnitExponentExpression implements SIUnitExpression <50> =
    SIUnitExpression "^" exponent:SignedNatLiteral;

  /**
   * The SIUnitBasics are the primitives of the SIUnitExpressions
   *
   * SIUnitBasics contains the basic SI units without prefixes
   * such as 'm', 's' or 'kg'
   * as well as the basic SI units with prefixes
   * such as 'km', 'mm' or 'ms'.
   *
   * Other derived or officialy accepted units are also contained
   * ('h', 'day', 'Ohm', ...)
   */
  interface SIUnitBasic extends SIUnitExpression;

  /**
   * UnitBaseDimWithPrefix
   *
   * The regular expression is defined according to:
   * * https://en.wikipedia.org/wiki/Metric_prefix
   * * https://en.wikipedia.org/wiki/SI_base_unit
   * * https://en.wikipedia.org/wiki/SI_derived_unit
   * The regular expression is needed, because SI units shall not be
   * defined as keywords, because they would not be usable e.g. as
   * variable names in other places anymore.
   * See also functions available to handle the stored unit.
   */
  UnitBaseDimWithPrefix implements SIUnitBasic =
    { cmpTokenRegEx(1,
        "(Y|Z|E|P|T|G|M|k|h|da|d|c|m|u|n|p|f|a|z|y)?" +
        "(m|g|s|A|K|mol|cd|Hz|N|Pa|J|W|C|V|F|Ohm|S|Wb|T|H|lm|lx|Bq|Gy|Sv|kat|l|L)")
    }? unit:Name;

  GreekMicro implements SIUnitBasic =
    { cmpToken(2,
        "m","g","s","A","K","mol","cd","Hz","N","Pa","J","W","C","V","F","Ohm","S","Wb","T","H","lm","lx","Bq","Gy","Sv","kat","l","L")
        && noSpace(2)
    }? "µ" unit:Name;

  GreekOhm implements SIUnitBasic =
    { next("Y","Z","E","P","T","G","M","k","h","da","d","c","m","u","µ","n","p","f","a","z","y")
        && noSpace(2)
    }? (prefix:Name | micro:"µ") "Ω" |
    "Ω";

  /**
   * OfficallyAcceptedUnit
   *
   * is realized like UnitBaseDimWithPrefix, using a regular matching
   * expression according to:
   * https://en.wikipedia.org/wiki/Non-SI_units_mentioned_in_the_SI
   */
  OfficallyAcceptedUnit implements SIUnitBasic =
    { next(
      "min","h","d","ha","t","au","Np","B","dB","eV","Da","u")
    }? unit:Name;

  /**
   * CelsiusFahrenheit matches "°C" and "°F"
   *
   * Lookahead needed at the beginning to distinguish with other alternatives
   */
  CelsiusFahrenheit implements SIUnitBasic =
    { cmpToken(2,"F","C") && noSpace(2) }? "°" unit:Name;


  /**
   * SIUnitDimensionless matches "°" and "deg|rad|sr"
   * according to see https://en.wikipedia.org/wiki/SI_derived_unit
   */
  SIUnitDimensionless implements SIUnitBasic =
    "°" |
    { next("deg","rad","sr") }? unit:Name;
}