/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar defines SI units and other derived units such as 
 * 'm', 'km', 'km^2' or 'm*deg/(h^2*mg)'.
 * As syntactic sugar this grammar also defines SI unit groups
 * such as 'VAh' or 'kV^2A^3h'.
 *
 * The definitions are fully compliant to the definitions given in
 * International Bureau of Weights and Measures (20 May 2019),
 * SI Brochure: The International System of Units (SI) (9th ed.).
 *
 * SI units are declared as independent Nonterminal and can then
 * be used as part of a
 * * value definition, such as "5kg", or
 * * type definition, such as "km/h"
 *
 * The grammar extends the MontiCore common literals, because it uses
 * natural numbers e.g. as exponent.
 */

grammar SIUnits extends de.monticore.literals.MCCommonLiterals {

  /**
   * The SIUnit describes an expression containing
   * SIUnitPrimitives as primitives so that every
   * combination of 'x*y', 'x/y', 'x^n' and '(x)'
   * is possible.
   */

  SIUnit =
    { isSIOneDiv() }?
      one:NatLiteral "/" denominator:SIUnitPrimitive |
    { isSIDiv() }?
      numerator:SIUnitPrimitive "/" denominator:SIUnitPrimitive |
    SIUnitPrimitive;


  /**
   * The SIUnitPrimitives are the primitives of the SIUnit
   *
   * SIUnitPrimitives contains the basic SI units without prefixes
   * such as 'm', 's' or 'kg'
   * as well as the basic SI units with prefixes
   * such as 'km', 'mm' or 'ms'.
   *
   * Other derived or officialy accepted units are also contained
   * ('h', 'day', 'Ohm', ...)
   */
  interface SIUnitPrimitive;


  /**
   * SIUnitWithPrefix
   *
   * The regular expression is defined according to:
   * * https://en.wikipedia.org/wiki/Metric_prefix
   * * https://en.wikipedia.org/wiki/SI_base_unit
   * * https://en.wikipedia.org/wiki/SI_derived_unit
   * * https://en.wikipedia.org/wiki/Non-SI_units_mentioned_in_the_SI
   *
   * The expression matches an SI unit starting
   * with a prefix. An SI unit that can have a
   * prefix is one of the following:
   *  'm,g,s,A,K,mol,cd,Hz,N,Pa,J,W,C,V,F,Ohm,
   *   Ω,S,Wb,T,H,lm,lx,Bq,Gy,Sv,kat,l,L'
   *
   * Alternatively the SIUnitWithPrefix is
   * followed by any other SIUnitWithPrefix or 
   * SIUnitWithoutPrefix (see below) for a
   * SI unit group, e.g. 'kVAh'.
   * 
   * The regular expression is needed, because SI 
   * units shall not be defined as keywords
   * because they would not be usable e.g. as
   * variable names in other places anymore.
   * See also functions available to handle the
   * stored unit.
   */
  SIUnitWithPrefix implements SIUnitPrimitive =
    { isSIUnitWithPrefix(1) }? (Name | NonNameUnit);


  /**
   * SIUnitWithoutPrefix
   *
   * The regular expression is defined according to:
   * * https://en.wikipedia.org/wiki/Metric_prefix
   * * https://en.wikipedia.org/wiki/SI_base_unit
   * * https://en.wikipedia.org/wiki/SI_derived_unit
   * * https://en.wikipedia.org/wiki/Non-SI_units_mentioned_in_the_SI
   *
   * The expression matches an SI unit not starting
   * with a prefix. An SI unit that does not need a
   * prefix is one of the following:
   *  'm,g,s,A,K,mol,cd,Hz,N,Pa,J,W,C,V,F,Ohm,
   *   Ω,S,Wb,T,H,lm,lx,Bq,Gy,Sv,kat,l,L'
   * and
   *  'min,h,d,ha,t,au,Np,B,dB,eV,Da,u'
   *
   * Alternatively the SIUnitWithPrefix is
   * followed by any other SIUnitWithPrefix (see
   * above) or SIUnitWithoutPrefix for a
   * SI unit group, e.g. 'VAh'.
   * 
   * The regular expression is needed, because SI 
   * units shall not be defined as keywords
   * because they would not be usable e.g. as
   * variable names in other places anymore.
   * See also functions available to handle the
   * stored unit.
   */
  SIUnitWithoutPrefix implements SIUnitPrimitive =
    { isSIUnitWithoutPrefix(1) }? (Name | NonNameUnit);


  /** This Token is needed because the Name-Token
   * does not cover greek Ohm 'Ω' and greek mu 'µ'.
   * The Token contains at least one of those
   * symbols.
   */
  token NonNameUnit =
    'µ'     UnitChar+ |
    UnitChar* 'Ω' |
     'µ'     'Ω' ;

  fragment token UnitChar =
    'a'..'z' | 'A'..'Z' ;


  /**
   * The SIUnitKindGroupWithExponent combines
   * several SIUnitWithPrefix and SIUnitWithoutPrefix
   * with exponents as one SI unit group, such as
   * 'kV^2Ah' and 's^2m'
   */
  SIUnitKindGroupWithExponent implements SIUnitPrimitive =
    SIUnitWithPrefix "^" exponent:SignedNatLiteral
      (SIUnitWithoutPrefix "^" exponent:SignedNatLiteral)*
      SIUnitWithoutPrefix? |
    (SIUnitWithoutPrefix "^" exponent:SignedNatLiteral)+
      SIUnitWithoutPrefix?;


  /**
   * CelsiusFahrenheit matches "°C" and "°F"
   *
   * Lookahead needed at the beginning to distinguish with other alternatives
   */
  CelsiusFahrenheit implements SIUnitPrimitive =
    { isCelsiusFahrenheit(1) }? "°" unit:Name;


  /**
   * SIUnitDimensionless matches "°" and "deg|rad|sr"
   * according to https://en.wikipedia.org/wiki/SI_derived_unit
   */
  SIUnitDimensionless implements SIUnitPrimitive =
    "°" |
    { isDimensionless(1) }? unit:Name;


  // Defining semantic predicates
  concept antlr {
    parserjava {
      public static final String prefix =
        "(Y|Z|E|P|T|G|M|k|h|da|d|c|m|u|µ|n|p|f|a|z|y)";
      public static final String unitWithPrefix =
        "(m|g|s|A|K|mol|cd|Hz|N|Pa|J|W|C|V|F|Ohm|Ω|S|Wb|T|H|lm|lx|Bq|Gy|Sv|kat|l|L)";
      public static final String unitWithoutPrefix =
        "(min|h|d|ha|t|au|Np|B|dB|eV|Da|u)";
      public static final String units =
        "(m|g|s|A|K|mol|cd|Hz|N|Pa|J|W|C|V|F|Ohm|Ω|S|Wb|T|H|lm|lx|Bq|Gy|Sv|kat|l|L|min|h|d|ha|t|au|Np|B|dB|eV|Da|u)";

      /* returns true iff the next token matches a
       *  SI unit starting with a prefix
       */
      public boolean isSIUnitWithPrefix(int i) {
        String regex = "(" + prefix + unitWithPrefix + units + "*" + ")|" + units + "*";
        return cmpTokenRegEx(i, regex);
      }

      /* returns true iff the next token matches a
       *  SI unit starting without a prefix
       */
      public boolean isSIUnitWithoutPrefix(int i) {
        return cmpTokenRegEx(i, units + "*");
      }

      public boolean isDimensionless(int i) {
        return cmpToken(i,"°","deg","rad","sr");
      }

      public boolean isCelsiusFahrenheit(int i) {
        return cmpToken(1,"°") && cmpToken(2,"C","F") && noSpace(2);
      }

      public int countPrimitive(int i) {
        if (isSIUnitWithPrefix(i)) return 1;
        if (isSIUnitWithoutPrefix(i)) return 1;
        if (isDimensionless(i)) return 1;
        if (isCelsiusFahrenheit(i)) return 2;
        else
          return -1;
      }

      public int isSIUnitKindGroupWithExponent(int i) {
        int j = countPrimitive(i);
        int counter = 0;
        if (j > 0) {
          while (j > 0) {
            counter += j;
            if (cmpToken(i + counter, "^")
                && noSpace(i + counter, i + counter + 1)
                && cmpTokenRegEx(i + counter + 1, "\\d+")) {
              counter += 2;
              j = countPrimitive(i + counter);
            } else if (cmpToken(i + counter, "^")
                && noSpace(i + counter, i + counter + 1, i + counter + 2)
                && cmpToken(i + counter + 1, "-")
                && cmpTokenRegEx(i + counter + 2, "\\d+")) {
              counter += 3;
              j = countPrimitive(i + counter);
            }
            else j = -1;
          }
          return counter;
        }
        return -1;
      }

      public int countSIUnit(int i) {
        int j = isSIUnitKindGroupWithExponent(i);
        if (j > 0) return j;
        j = countPrimitive(i);
        if (j > 0) return j;
        return -1;
      }

      public boolean isSIUnit(int i) {
        return countSIUnit(i) > 0;
      }

      public boolean isSIDiv() {
        int j = countSIUnit(1);
        if (j > 0 && noSpace(1 + j, 2 + j)
            && cmpToken(1 + j, "/")
            && isSIUnit(2 + j)) {
          return true;
        }
        return false;
      }

      public boolean isSIOneDiv() {
        return cmpToken(1, "1") && noSpace(2,3) && isSIUnit(3);
      }
    }
  }

}
