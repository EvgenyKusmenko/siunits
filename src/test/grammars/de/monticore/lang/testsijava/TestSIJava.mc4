/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.testsijava;

/**
 * This grammar is an example on how one could combine
 * expressions with SIUnits and SIUnitLiterals.
 * It is a very simple version of java with siunits and
 * custom types that can be siunit types.
*/

grammar TestSIJava extends de.monticore.SIUnitLiterals,
                            de.monticore.expressions.CommonExpressions,
                            de.monticore.expressions.AssignmentExpressions,
                            de.monticore.statements.MCCommonStatements,
                            de.monticore.SIUnitTypes4Computing,
                            de.monticore.symbols.OOSymbols {

    symbol scope SIJavaClass =
    "package" package:(Name& || ".")+ ";"
    "siclass" Name "{"
        SIJavaClassStatement*
    "}";

    interface SIJavaClassStatement;

    FieldDeclaration implements Field, SIJavaClassStatement, SIJavaMethodStatement =
        MCType Name ("=" Expression)? ";";

    MethodDeclaration implements Function, SIJavaClassStatement =
        returnType:MCReturnType Name "(" (SIJavaParameter||",")* ")" "{"
            SIJavaMethodStatement*
            SIJavaMethodReturn?
        "}";

    SIJavaParameter implements Variable =
        MCType Name;

    interface SIJavaMethodStatement;

    // Here only AssignmentExpressions and CallExpressions are allowed (CoCo)
    SIJavaMethodExpression implements SIJavaMethodStatement =
        Expression ";";

    SIJavaMethodReturn =
        "return" Expression ";";
}
