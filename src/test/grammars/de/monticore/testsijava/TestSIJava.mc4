/* (c) https://github.com/MontiCore/monticore */
package de.monticore.testsijava;

/**
 * This grammar is an example on how one could combine expressions with siunits.
 * It is a very simple version of java with siunits and custom types that can be siunit types.
*/

component grammar TestSIJava extends de.monticore.lang.literals.SIUnitLiterals,
                            de.monticore.expressions.CommonExpressions,
                            de.monticore.expressions.AssignmentExpressions,
                            de.monticore.statements.MCCommonStatements {

symbol scope SIJavaClass =
"package" package:(Name& || ".")+ ";"
"siclass" Name "{"
    statement:SIJavaClassStatement*
"}";

external ExtCustomType;

CustomType implements MCType =
    ExtCustomType;

interface SIJavaClassStatement;

interface FieldOrVariableDeclaration extends Field =
    MCType Name ("=" assignment:Expression)? ";";

FieldDeclaration implements FieldOrVariableDeclaration, SIJavaClassStatement =
    MCType Name ("=" assignment:Expression)? ";";

SIUnitLiteralExperession implements Expression <350> =
    SIUnitLiteral;

symbol scope MethodDeclaration implements SIJavaClassStatement =
    "metod" MethodSignature "{"
        statement:SIJavaMethodStatement*
    "}";

MethodSignature =
    returnType:MCReturnType Name "(" (SIJavaParameter||",")* ")";

SIJavaParameter =
    MCType Name;

interface SIJavaMethodStatement;

VariableDeclaration implements FieldOrVariableDeclaration, SIJavaMethodStatement <100> =
    MCType Name ("=" assignment:Expression)? ";";

SIJavaMethodExpression implements SIJavaMethodStatement <10> =
    expression:Expression ";";
}